services:
  postgres:
    image: postgres:17.5
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER:    ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:      ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/init_schema.sql
    healthcheck:
      test:     ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout:  5s
      retries:  5

  pgadmin:
    image: dpage/pgadmin4:9.4
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL:    ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  spark:
    build: .
    env_file:
      - .env
    environment:
      - SPARK_DRIVER_MEMORY=4g
      - SPARK_EXECUTOR_MEMORY=4g
      - SPARK_DRIVER_MAXRESULTSIZE=2g  
    volumes:
      - ./scripts:/app/scripts
      - ./data:/app/data
    depends_on:
      - postgres
    # comando padrão já vem do ENTRYPOINT do Dockerfile,
    # aqui apenas indicamos o script a executar:
    command: ["scripts/run_pipeline.py"]

  
volumes:
  pgdata:
  pgadmin_data:
